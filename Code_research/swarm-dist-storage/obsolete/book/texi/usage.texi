@node Usage, API, Running a node, Top
@chapter Usage


@menu
* Upload directory, upload file::
* Setting up your chequebook::
* Configure
* Download directory, download file::
* On demand partial reads::
* Auto restart::
* Register and resolve domain names::
* Versioning by block number::
* Modifying content::
* Expiry::
* Manifest::
@end menu

@node Using a local Swarm Instance, , Usage, Usage
@section Using a local Swarm Instance

@subsubheading Running your client
To start a swarm node we must start geth with an empty data directory on a private network. First set aside an empty temporary directory to be the data store

@codequotebacktick on
@codequoteundirected on

@example
 DATADIR=/tmp/BZZ/`date +%s`
@end example
 
then make a new account using this directory 

@example
 PASSWORD="mypassword"
 /geth --datadir $DATADIR --password  `echo -n $PASSWORD` account new
@end example

and finally, launch geth on a private network (id 322)

@example
    ./geth --datadir $DATADIR @backslashchar{} 
           --port 30301 @backslashchar{} 
           --unlock primary @backslashchar{} 
           --password `echo $PASSWORD` @backslashchar{} 
           --logfile $DATADIR/bzz.log @backslashchar{} 
           --logtostderr @backslashchar{} 
           --verbosity 6 @backslashchar{} 
           --rpc @backslashchar{} 
           --rpcport 8101 @backslashchar{} 
           --rpccorsdomain '*' @backslashchar{} 
           --bzz @backslashchar{} 
           --networkid 322 @backslashchar{} 
           --nodiscover @backslashchar{} 
           --maxpeers 0 @backslashchar{} 
           console   2>> $DATADIR/bzz.glog
@end example

At this verbosity level you should see plenty of output accumulating in the logfile. You can keep en eye on it using the command @command{tail -f $DATADIR/bzz.glog}.


@subsubheading Uploading a file or directory to your local swarm instance

Included in the swarm repository is a shell script that makes it easy to upload a file to a local swarm node using http port 8500.

@example
bash bzz/bzzup/bzzup.sh /path/to/myFileOrDirectory
@end example

If this command is successful, the output will be a hash
@example
65b2a32ab2230d7d2bad2616e804d374921be68758009491cd52c727e37b4979
@end example

If unsuccessful (for example if no local node is running) the output will simply be blank.

It is also possible to upload a file or directory from the console like this

@example
hash = bzz.upload("/path/to/myFileOrDirectory", "index.html")
@end example

Here the second parameter (index.html) is to be mapped to the root path '/'.

@subsubheading Downloading a file from your local swarm instance

Your local swarm instance has an http interface running on port 8500 (by default). To download a file is thus a simple matter of pointing your browser to

@example
http://localhost:8500/65b2a32ab2...7b4979
@end example

or, if you prefer, you can use the console 
@example
bzz.get(hash)
@end example



@node Manifests, , Using a local Swarm Instance, Usage
@section Manifests

In general Manifests declare a list of strings associated with swarm entries. Before we get into generalities however, let us begin with an introductory example.

@subsubheading A Manifest example - directory trees

Suppose we had used @command{bzzup.sh} (as described above) to upload a directory to swarm instead of just a file:

@example
bash bzz/bzzup/bzzup.sh /path/to/directory
@end example

then the resulting hash points to a "manifest" - in this case a list of files within the directory along with their swarm hashes. Let us take a closer look.

@subsubheading The raw Manifest
We can see the raw Manifest by prepending @code{raw/} to the URL like so
@example
    wget -O - "http://localhost:8500/raw/HASH"
@end example

In our example it contains a list of all files contained in @code{/path/to/directory} together with their swarm ids (hashes) as well as their content-types. It may look like this: (whitespace added here to make it legible)

@example
{"entries":[{"hash":"HASH-for-fileA1",
"path":"directoryA/fileA1",
"contentType":"text/plain"},
{"hash":"HASH-for-fileB2",
"path":"directoryA/directoryB/fileB2",
"contentType":"text/plain"},
{"hash":"HASH-for-fileB1",
"path":"directoryA/directoryB/fileB1",
"contentType":"text/plain"},
{"hash":"HASH-for-fileC1",
"path":"directoryA/directoryC/fileC1",
"contentType":"text/plain"}]}
@end example

@subsubheading A note on content type
Manifests contain content-type information for the hashes they reference. In other contexts, where content-type is not supplied or, when you suspect the information is wrong, it is possible in a raw query to specify the content-type manually in the search query.

@example
admin.httpGet("http://localhost:8500/raw/hash/?content_type=\"text/plain\"")
@end example


@subsubheading Path Matching on Manifests
A useful feature of manifests is that Urls can be matched on the paths. In some sense this makes the manifest a routing table and so the manifest swarm entry acts as if it were a host.

More concretely, continuing in our example, we can access the file 
@example
/path/to/directory/subdirectory/filename
@end example
by pointing the browser to
@example
http://localhost:8500/HASH/subdirectory/filename
@end example

Note: if the filename is @code{index.html} then it can be omitted.

@subsubheading Manifests in general
Although in our example above the manifest was essentially a file listing in a directory, there is no reason for a Manifest to take this form. Manifests simply match strings with swarm id's, and there is no requirement that the strings be of the form @code{path/to/file}. Indeed swarm treats @code{path/to/file} as just another identifying string and there is nothing special about the @code{/} character. 

@strong{However}, a browser will treat @code{/} as a special character. This is important to remember when specifying (relative) URL's in your Dapp.

@node The bzz:// URL scheme, , Manifests, Usage
@section The bzz:// URL scheme
To make it easier to access swarm content, we can use the bzz URL scheme. One of its primary merits is that it allows us to use human readable addresses instead of hashes. This is achieved by a name registration contract on the blockchain. 

@subsubheading  http module for urls on the console
The in-console http client understands the bzz scheme if geth is started with swarm enabled. Syntax:

@example
admin.httpGet(url)
admin.httpGet(url, /path/to/save)
@end example

The console http module is a very simple http client, that understands the bzz scheme if bzz is enabled.

@itemize @bullet
@item `http.get(url)`
@item `http.loadScript(url)` should be same as JSRE.loadScript
@end itemize

@subsubheading bzz console api overview

@itemize @bullet
@item  @code{bzz.upload(localfspath, indexfile)} returns content hash
@item  @code{bzz.download(bzzpath, localdirpath)} 
@item  @code{bzz.put(content, contentType)} returns content hash
@item  @code{bzz.get(bzzpath)} returns object with content, mime type, status code and content size
@item  @code{bzz.register(address, hash, domain)} 
@item  @code{bzz.resolve(domain)} returns content hash
@end itemize


@node Name Registration for swarm content, , The bzz:// URL scheme, The bzz:// URL scheme
@subsection Name Registration for swarm content
It is the swarm hash of a piece of data that dictates routing. Therefore its role is somehwhat analogous to an IP address in the TCP/IP internet. Domain names can be registered on the blockchain and set to resolve to any swarm hash. The bzz blockchain registry is thus analogous to DNS (and no ICANN nor any name servers are needed).

Currently the domain name is any arbitrary string in that the contract does not impose any restrictions. Since this is used in the host part of the url in the bzz scheme, we recommend using wellformed domain names so that there is interoperability with restrictive url handler libs. 

In the bzz:// URL scheme it is possible to supply a block number; 
@example
bzz://swarm.com;144
@end example
and this means that we want swarm.com to be resolved to a hash as registered in the registry at block 144. (Note the semicolon @code{;} in the URL)

Example: using bzz api and registered names:
@example
js
hash = bzz.upload("/path/to/my/directory")

hash = bzz.put("console.log(\"hello from console\")", "application/javascript")

bzz.get(hash)
{
  content: 'console.log("hello");',
  contentType: 'application/javascript',
  status: '0'
  size: '21',
}

http.get("bzz://"+hash)
'console.log("hello from console")'

http.loadScript("bzz://"+hash)
hello from console
true

bzz.register(primary, hash, "hello")
@end example

@node Name registration for contracts, , Name Registration for swarm content, The bzz:// URL scheme
@subsection Name registration for contracts
It is also possible to register human readable names for contracts.
@subsubheading Prerequisites
In order to do this, you must have a @code{globalRegistrar} contract deployed and you must have HashReg, @code{UrlHint} deployed and registered with @code{globalRegistrar}.

These need to be done only once for every chain. See appendix.

If this was successful, you will see these commands respond with addresses.

@example
registrar.owner("HashReg");
registrar.owner("UrlHint");
registrar.addr("HashReg");
registrar.addr("UrlHint");
@end example

and these commands will respond with code:

@example
eth.getCode(globalRegistrarAddr);
eth.getCode(hashRegAddr);
eth.getCode(urlHintAddr);
@end example

If these checks are ok, you are all set up.

@subsubheading Creating and a contract
In order to continue this example, we must write a contract and deploy its compiled code on the blockchain. We proceed:

@example
js
admin.contractInfo.stop();

source = "contract test {@backslashchar{}n" +
"   /// @@notice will multiply `a` by 7.@backslashchar{}n" +
"   function multiply(uint a) returns(uint d) {@backslashchar{}n" +
"      return a * 7;@backslashchar{}n" +
"   }@backslashchar{}n" +
"} ";
contract = eth.compile.solidity(source).test;
contractaddress = eth.sendTransaction({from: primary, data: contract.code});
@end example

Then we must wait until the contract is included in a block. Thus, if we are on a private test network, wem must mine a block
@example
miner.start(1); admin.sleepBlocks(1); miner.stop();
@end example

we continue

@example
contractaddress = eth.getTransactionReceipt(txhash).contractAddress;
eth.getCode(contractaddress);

multiply7 = eth.contract(contract.info.abiDefinition).at(contractaddress);
fortytwo = multiply7.multiply.call(6);
@end example

Then we check if everything worked and the contracts are deployed and usable
@example
code = eth.getCode(contractaddress);
abiDef = contract.info.abiDefinition;
multiply7 = eth.contract(abiDef).at(contractaddress);
multiply7.multiply.call(6);
@end example

@subsubheading Deploying contract info in swarm and registering its hash
The contract.info substructure given back from the solidity compiler can be deployed with swarm. The resulting contenthash is registered in the HashReg.

@example
contenthash = bzz.put(JSON.stringify(contract.info), 
      @ifnothtml{@math{\hookrightarrow}}@c
@end ifnothtml@c
 "application/eth-contractinfo+json");
admin.register(primary, contractaddress, contenthash);
miner.start(1); admin.sleepBlocks(1); miner.stop();
//mining only needed if you are on a private chain self mining
@end example


@subheading Contract usage from dapp (or user-side case example)

@code{admin.getContractInfo()} will magically work. If the url fetcher has the bzz protocol scheme enabled, then it tries to fetch it with the registered contenthash. (If there is no swarm or the content is not (yet) uploaded there, it gracefully falls back to the UrlHint, ie., it looks up the url hint for the contentHash, fetches its content, and verifies it against the contentHash for protection.)

Note that the user needs the contractaddress but nothing else.

@example
info = admin.getContractInfo(contractaddress);
multiply7 = eth.contract(info.abiDefinition).at(contractaddress);
@end example
Now that we switch on natspec and try:

@example
admin.startNatSpec();
multiply7.multiply.sendTransaction(6, { from: primary });
@end example
The following custom confirmation message should appear on the console and 6 shall be multiplied by seven:

@example
myMultiply7.multiply.sendTransaction(6)
NatSpec: Will multiply 6 by 7. 
Confirm? [y/n] y
@end example

@subsubheading Registering names for contracts

And now we can go one step further and use the globalRegistrar name registry for contracts:

@example
admin.stopNatSpec();
registrar.reserve.sendTransaction("multiply7", {from:primary})
registrar.setAddress.sendTransaction("multiply7", 
                     @math{\hookrightarrow} contractaddress, true, {from:primary})
@end example

You need to wait for these 2 transactions to be confirmed. 
@example
miner.start(1); admin.sleepBlocks(2); miner.stop(); 
@end example
You can check if arrived:

@example
registrar.owner("multiply7")
@end example

Now the contract name is sufficient to use this contract from a Dapp.

@example
contractaddress = registrar.addr("multiply7")
info = admin.getContractInfo(contractaddress);
multiply7 = eth.contract(info.abiDefinition).at(contractaddress);
@end example

If info is only needed because of the Abi, then one could define this function:

@example
getContract = function(name) {
  contractaddress = registrar.addr(name)
  info = admin.getContractInfo(contractaddress);
  return eth.contract(info.abiDefinition).at(contractaddress);  
}
@end example

@example
web3.sha3(eth.getCode(registrar.addr("multiply7")))
51b68b0f44e8c6ef096797efbed04185fd4c4a639cd5ffe52e96076519c1385d
@end example

@node Using bzz domain names, , Name registration for contracts, The bzz:// URL scheme
@subsection Using bzz domain names
Now that we know how to register names, let us see how to use them in practice

@example
albumHash = bzz.upload("/Users/tron/Work/ethereum/go-ethereum/bzz/bzzdemo/", 
              @ifnothtml{@math{\hookrightarrow}}@c
@end ifnothtml@c
  "index.html")
bzz.register(primary, "album", albumHash)
miner.start(1); admin.sleepBlocks(1); miner.stop();
//mining needed if you are on a private chain
bzz.resolve("album")
admin.httpGet("bzz:/album/")
@end example

you can also try
@example
bzz.download("/album", "/tmp/album");
bzz.upload("/tmp/album", "index.html");
@end example

And using the bzz URL's in the http module we can now try these (matching, fallbacks errors)
@example
admin.httpGet("bzz://51b68b0f44e8c6ef...1385d/")
admin.httpGet("bzz://album/index.html")
admin.httpGet("bzz://album/index.css")
@end example

As indicated above, we can force a content type manually to get at the raw content:

@example
http.get("http://raw/album/?content\_type=\"text/plain\"")
@end example

@node Changing registered name,  , Using bzz domain names, The bzz:// URL scheme
@subsection Changing registered name, managing versions, rollback

Suppose we have registered the name @code{swarmpicture} as in

@example
bzz.register(primary, "swarmpicture",   
      @ifnothtml{@math{\hookrightarrow}}@c
@end ifnothtml@c
  bzz.upload("bzz.demo/swarm-inside.png", "swarm-inside.png"))
@end example

After some blocks are mined, this content will become accessible at

@code{http://localhost:8500/swarmpicture/} 

and the resolver should work too as:
@example
bzz.resolve("swarmpicture")
'0x58c604de89bf3ecbbbfc90948b273ae3f956e6106babd5e8bacb3615213d3c2e'
@end example

Let us remember this version of "swarmpicture"

@example
v1 = eth.blockNumber
@end example

Now we realise that we have made a mistake and want to include the full logo in our site and se we re-register:
@example
bzz.register(primary, "swarmpicture",  
      @ifnothtml{@math{\hookrightarrow}}@c
@end ifnothtml@c
  bzz.upload("bzz.demo/MSTR-Swarm-Logo.jpg", "MSTR-Swarm-Logo.jpg"))
@end example

then mine some more @code{miner.start(); admin.sleepBlocks(1); miner.stop();} and then we can resolve as
@example
bzz.resolve("swarmpicture")
'0x8232b8259393019920d57737c1073c78a6cee18ffa8bfcfdc0cd378a732415a8'
@end example
This new registration of "swarmpicture" is stored at a different block
@example
v2 = eth.blockNumber
@end example

The full historical record is addressable:

[http://localhost:8500/swarmpicture;31/] vs [http://localhost:8500/swarmpicture;32/]

And you can see it with the bzz-aware http client:

@example
> http.get("bzz://raw/swarmpicture:"+v1+"?content\_type=text/json")
'{"entries":[{"path":"swarm-inside.png","hash":"a41a826e...28", 
      @ifnothtml{@math{\hookrightarrow}}@c
@end ifnothtml@c
 "contentType":"image/png","status":0},{"path":"", 
            @ifnothtml{@math{\hookrightarrow}}@c
@end ifnothtml@c
"hash":"a41a826e...28","contentType":"image/png","status":0}]}'
> http.get("bzz://raw/swarmpicture:"+v2+"?content\_type=text/json")
'{"entries":[{"path":"MSTR-Swarm-Logo.jpg","hash":"35e6a17f...1d", 
      @ifnothtml{@math{\hookrightarrow}}@c
@end ifnothtml@c
"contentType":"image/jpeg","status":0},{"path":"", 
            @ifnothtml{@math{\hookrightarrow}}@c
@end ifnothtml@c
"hash":"35e6a17f...1d","contentType":"image/jpeg","status":0}]}'
@end example




@node Appendix - Deploying a Name Registry,  , The bzz:// URL scheme, Usage
@section Appendix - Deploying a Name Registry

@subsubheading mine some ether on a private chain

@example
primary = eth.accounts[0];
balance = web3.fromWei(eth.getBalance(primary), "ether");

admin.miner.start(8);
admin.sleepBlocks(10);
admin.miner.stop()  ;
@end example

@subsubheading mine transactions on a private chain

@example
eth.getBlockTransactionCount("pending");
eth.getBlock("pending", true).transactions;

miner.start(1);
admin.sleepBlocks(eth.blockNumber+1);
miner.stop();

eth.getBlockTransactionCount("pending");
@end example

@subsubheading create and deploy GlobalRegistrar, HashReg and UrlHint

@example
primary = eth.accounts[0];
globalRegistrarAddr = admin.setGlobalRegistrar(primary);
hashRegAddr = admin.setHashReg(primary);
urlHintAddr = admin.setUrlHint(primary);
@end example

You need to mine or wait till the txs are all picked up.
Initialise the registrar on the new address and check if the other registars are registered:

@example
registrar = GlobalRegistrar.at(globalRegistrarAddr);
registrar.owner("HashReg");
registrar.owner("UrlHint");
registrar.addr("HashReg");
registrar.addr("UrlHint");
@end example

Next time you only need to specify the address of the GlobalRegistrar (for the live chain it is encoded in the code)

@example
admin.setGlobalRegistrar("0x6e332ff2d38e8d6f21bee5ab9a1073166382ce33")
registrar = GlobalRegistrar.at(GlobalRegistrarAddr);
registrar.owner("HashReg");
registrar.owner("UrlHint");
registrar.addr("HashReg");
registrar.addr("UrlHint");
@end example

