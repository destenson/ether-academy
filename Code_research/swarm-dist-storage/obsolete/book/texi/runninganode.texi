@node  Running a node, Usage, Introduction, Top
@chapter  Running a node



@quindex What do I want to install?

@quindex What is Swarm?

@menu
* Installation::
* Configuration options::
* Getting started::
@end menu

@node Installation, Configuration options, Running a node, Running a node
@section Installation

Swarm is part of the Ethereum stack and currently only supports running on the ethereum network as a subprotocol of the go client nodes.
Bzz aware @command{geth} is on ethersphere's fork of @file{go-ethereum} (and currently only supports manual install from source), within the @command{bzz} branch.

Installation instructions for manual build are identical to those for the ethereum go implementation.
See @url{https://github.com/ethereum/go-ethereum/wiki/Developers'-Guide}

@menu
* Download::
* Supported Platforms::
* Prerequisites::
* Building from source::
@end menu

@node Download, Supported Platforms, Installation, Installation
@subsection Download

@quindex Where can I find the sources?
The source code is found on github: https://github.com/ethersphere/go-ethereum/tree/bzz/


@node Supported Platforms, Prerequisites, Download, Installation
@subsection Supported Platforms

@quindex What platforms are supported by Swarm?
Geth runs on all major platforms (linux, MacOSX, Windows, also raspberry pie, android OS).

@quotation
@strong{Warning:}
This package has not been tested on platforms other than linux and OSX.
@end quotation

@node Prerequisites, Building from source, Supported Platforms, Installation
@subsection Prerequisites

@quindex What do I need if I want to install this package?


On top of the @code{go} compiler and  buildtools, building @command{geth} requires the following packages:

@itemize
@item [GMP](https://gmplib.org)
@item [Go](https://golang.org)
@item [Git](http://git.org)
@item [Godep](http://github.com/gotools/godep)
@end itemize


Grab the relevant prerequisites and build from source.

@example
apt-get install libgmp32-dev golang git
@end example

On Mac OSX, using @command{brew}

@example
brew install gmp go git
go get http://github.com/gotools/godep
@end example

Now set your environment variables:

@example
go get github.com/tools/godep
PATH=$GOPATH/bin:$PATH
GOPATH=`godep path`:$GOPATH
@end example


@node Building from source,  , Prerequisites, Installation
@subsection Building from source

Clone the repository (or better, your fork of it) to a directory of your choosing and switch to the working directory of the repo. Now checkout to the @code{bzz} branch, pull the latest version and build the binary:

@example
cd go-ethereum
git checkout bzz
git pull
godep go build -v ./cmd/geth
@end example

You can now run @command{./geth} to start your node. See @ref{Running a node} to learn how to operate a swarm node.

@quindex How do I install the swarm?
@cindex make, swarm installation
@cindex Makefile, swarm installation

@example
$ make && sudo make install
@end example

in the toplevel directory of the unpacked distribution.



@node Configuration options, Getting started, Installation, Running a node
@section Configuration options

This section lists all the options you can set in the config file:

    @file{<datadir>/bzz/<baseaccount>/config.json}

By default the swarm data directory is under the ethereum's data directory but different depending on the base address. This is important if you run multiple swarm nodes since storage, configuration, connected peers will all be distinct depending on the base address.

@menu
* Main parameters::
* Storage parameters::
* Chunker/bzzhash parameters::
* Syncronisation parameters::
* Hive/Kademlia parameters::
* SWAP parameters::
@end menu

@node Main parameters, Storage parameters, Configuration options, Configuration options
@subsection Main parameters

@defopt Path (@file{<datadir>/bzz/<baseaccount>})
  swarm data directory
@end defopt

@defopt Port (8500)
  port to run the http proxy server
@end defopt

@defopt PublicKey
  Public key of your swarm base account
@end defopt

@defopt BzzKey
  Swarm node base address (@math{hash(PublicKey)}). This is used to decide storage based on radius and routing by kademlia.
@end defopt


@node Storage parameters, Chunker/bzzhash parameters, Main parameters, Configuration options
@subsection Storage parameters

@defopt ChunkDbPath (@file{<datadir>/bzz/<baseaccount>/chunks})
  leveldb directory for persistent storage of chunks
@end defopt

@defopt DbCapacity (5000000)
  chunk storage capacity, number of chunks (5M is roughly 20-25GB)
@end defopt

@defopt CacheCapacity (5000)
  Number of recent chunks cached in memory
@end defopt

@defopt Radius (0)
  Storage Radius: minimum proximity order (number of identical prefix bits of address key) for chunks to warrant storage. Given a storage radius @math{r} and total number of chunks in the network @math{n}, the node stores @math{n*2^{-r}} chunks minimum. If you allow @math{b} bytes for guaranteed storage and the chunk storage size is @math{c}, your radius should be set to @math{int(log_2(nc/b))}
@end defopt

@node Chunker/bzzhash parameters, Syncronisation parameters, Storage parameters, Configuration options
@subsection Chunker/bzzhash parameters

@cindex chunker
@cindex bzzhash

@defopt Branches (128)
  Number of branches in bzzhash merkle tree. @math{Branches*ByteSize(Hash)} gives the datasize of chunks.
@end defopt

@defopt Hash (SHA256)
  The hash function used by the chunker (base hash algo of bzzhash): SHA3 or SHA256
@end defopt

@defopt SplitTimeout (120s)
  Maximum time before splitting a document times out
@end defopt

@defopt JoinTimeout (120s)
  Maximum time before joining a document times out. Not used with Lazy Reader.
@end defopt

@node Syncronisation parameters, Hive/Kademlia parameters, Chunker/bzzhash parameters, Configuration options
@subsection Syncronisation parameters
@cindex syncronisation
@cindex smart sync

@defopt KeyBufferSize (1024)
In-memory cache for unsynced keys
@end defopt

@defopt SyncBufferSize (128)
In-memory cache for unsynced keys
@end defopt

@defopt SyncCacheSize (1024)
In-memory cache for outgoing deliveries
@end defopt

@defopt SyncBatchSize (128)
Maximum number of unsynced keys sent in one batch
@end defopt


@defopt SyncPriorities ([3, 3, 2, 1, 1])
Array of 5 priorities corresponding to 5 delivery types:
delivery, propagation, deletion, history, backlog. Specifying a monotonically decreasing list of priorities is highly recommended.
@end defopt
@cindex delivery types

@defopt SyncModes ([true, true, true, true, false])
A boolean array specifying confirmation mode ON corresponding to 5 delivery types:
delivery, propagation, deletion, history, backlog. Specifying true for a type means all deliveries will be preceeded by a confirmation roundtrip: the hash key is sent first in an unsyncedKeysMsg and delivered only if confirmed in a deliveryRequestMsg.
@end defopt
@cindex delivery types
@cindex delivery request message
@cindex unsynced keys message


@node Hive/Kademlia parameters, SWAP parameters, Syncronisation parameters, Configuration options
@subsection Hive/Kademlia parameters
@cindex Kademlia

@defopt CallInterval (1s)
  Time elapsed before attempting to connect to the most needed peer
@end defopt

@defopt BucketSize (3)
  Maximum number of active peers in a kademlia proximity bin. If new peer is added, the worst peer in the bin is dropped.
@end defopt

@defopt MaxProx (10)
  Highest Proximity order (i.e., Maximum number of identical prefix bits of address key) considered distinct. Given the total number of nodes in the network @math{N}, MaxProx should be larger than @math{log_2(N/ProxBinSize)}), safely @math{log_2(N)}.
@end defopt

@defopt ProxBinSize (8)
  Number of most proximate nodes lumped together in the most proximate kademlia bin
@end defopt

@defopt KadDbPath (@file{<datadir>/bzz/<baseaccount>/bzz-peers.json})
  json file path storing the known bzz peers used to bootstrap kademlia table.
@end defopt

@node SWAP parameters,  , Hive/Kademlia parameters, Configuration options
@subsection SWAP parameters
@cindex SWAP

@defopt BuyAt (@math{2*10^{10}} wei)
  highest accepted price per chunk in wei
@end defopt

@defopt SellAt (@math{2*10^{10}} wei)
  offered price per chunk in wei
@end defopt

@defopt PayAt (100 chunks)
  Maximum number of chunks served without receiving a cheque. Debt tolerance.
@end defopt

@defopt DropAt (10000)
  Maximum number of chunks served without receiving a cheque. Debt tolerance.
@end defopt
@cindex debt tolerance

@defopt AutoCashInterval (@math{3*10^{11}}, 5 minutes)
  Maximum Time before any outstanding cheques are cashed
@end defopt

@defopt AutoCashThreshold (@math{5*10^{13}})
  Maximum total amount of uncashed cheques in Wei
@end defopt

@defopt AutoDepositInterval (@math{3*10^{11}}, 5 minutes)
  Maximum time before cheque book is replenished if necessary by sending funds from the baseaccount
@end defopt

@defopt AutoDepositThreshold (@math{5*10^{13}})
  Minimum balance in Wei required before replenishing the cheque book
@end defopt

@defopt AutoDepositBuffer (@math{10^{14}})
  Maximum amount of Wei expected as a safety credit buffer on the cheque book
@end defopt

@defopt PublicKey (PublicKey(bzzaccount))
  Public key of your swarm base account use
@end defopt

@defopt Contract ()
  Address of the cheque book contract deployed on the Ethereum blockchain. If blank, a new chequebook contract will be deployed.
@end defopt

@defopt Beneficiary (Address(PublicKey))
  Ethereum account address serving as beneficiary of incoming cheques
@end defopt

@node Getting started,  , Configuration options, Running a node
@section Getting started

Use @command{geth} with the @code{--bzzaccount} parameter to start the client with Swarm enabled. If you want automatic deposits to your chequebook, then this account should be unlocked @code{--unlock}.

By default, the config file is sought under @file{<datadir>/bzz/<bzzaccount>/config.json}. If this file does not exist at startup, the default config file is created which you can then edit (the directories on the path will be created if necessary). In this case or if @code{config.Contract} is blank (zero address), a new chequebook contract is deployed. Until the contract is confirmed on the blockchain, no outgoing retrieve requests will be allowed.

@example
geth --bzzaccount 0 --unlock
@end example


@menu
* Setting up SWAP::
@end menu

@node Setting up SWAP,  , Getting started, Getting started
@subsection Setting up SWAP

SWAP (Swarm accounting protocol) is the  system that allows fair utilisation of bandwidth (see @ref{Incentivisation}, esp. @ref{SWAP -- Swarm Accounting Protocol}).
In order for SWAP to be used, a chequebook contract has to have been deployed. If the chequebook contract does not exist when the client is launched or if the contract specified in the config file is invalid, then the client attempts to autodeploy a chequebook:
@cindex chequebook
@cindex autodeploy (chequebook contract)

@example
[BZZ] SWAP Deploying new chequebook (owner: 0xe10536...5e491)
@end example

If you already have a valid chequebook on the blockchain you can just enter it in the config file @code{Contract} field.
@cindex chequebook contract address (@code{Contract} configuration parameter)
@vrindex Contract, chequebook contract address

You can set a separate account as beneficiary to which the cashed cheque payment for your services are to be credited. Set it on the @code{Beneficiary} field in the config file.
@cindex benefieciary (@code{Beneficiary} configuration parameter)
@vrindex Beneficiary, recipient address for service payments

Autodeployment of the chequebook can fail if the baseaccount has no funds and cannot pay for the transaction. Note that this can also happen if your blockchain is not synchronised. In this case you will see the log message:

@example
[BZZ] SWAP unable to deploy new chequebook: unable to send chequebook
      @ifnothtml{@math{\hookrightarrow}}@c
@end ifnothtml@c
 creation transaction: Account does not exist or account
      @ifnothtml{@math{\hookrightarrow}}@c
@end ifnothtml@c
 balance too low...retrying in 10s
@end example

If at this point you connect to another bzz capable node, the arrangement is that you cannot purchase and chunks. If the remote peers contract is found to be a valid chequebook, then you can sell to that peer; otherwise selling is disabled also.
Selling is also disabled if remote peer advertise a lower maximum accepted chunk price than our offer.
@cindex maximum accepted chunk price (@code{BuyAt})
@cindex offered chunk price (@code{BuyAt})
@vrindex SellAt, offered chunk price
@vrindex BuyAt, maximum accepted chunk price

@example
[BZZ] SWAP arrangement with <enode://23ae0e62......8a4c6bc93b7d2aa4fb
      @ifnothtml{@math{\hookrightarrow}}@c
@end ifnothtml@c
@@195.228.155.76:30301>: purchase from peer disabled;
      @ifnothtml{@math{\hookrightarrow}}@c
@end ifnothtml@c
 selling to peer disabled)
@end example

Since no business is possible here, the connection is idle until at least one party has a contract. In fact, this is only enabled for a test phase.
If we are not allowed to purchase chunks, then no outgoing requests are allowed. If we still try to download content that we dont have locally, the request will fail (unless we have credit with other peers).

@example
[BZZ] netStore.startSearch: unable to send retrieveRequest to peer
      @ifnothtml{@math{\hookrightarrow}}@c
@end ifnothtml@c
 [<addr>]: [SWAP] <enode://23ae0e62......8a4c6bc93b7d2aa4fb
      @ifnothtml{@math{\hookrightarrow}}@c
@end ifnothtml@c
@@195.228.155.76:30301> we cannot have debt (unable to buy)
@end example

Once one of the nodes has funds (say after mining a bit), and also someone on the network is mining, then the autodeployment will eventually succeed:

@example
[CHEQUEBOOK] chequebook deployed at 0x77de9813e52e3a...c8835ea7
      @ifnothtml{@math{\hookrightarrow}}@c
@end ifnothtml@c
(owner: 0xe10536ae628f7d6e319435ef9b429dcdc085e491)
[CHEQUEBOOK] new chequebook initialised from 0x77de9813e52e3a...c8835ea7
      @ifnothtml{@math{\hookrightarrow}}@c
@end ifnothtml@c
(owner: 0xe10536ae628f7d6e319435ef9b429dcdc085e491)
[BZZ] SWAP auto deposit ON for 0xe10536 -> 0x77de98: interval = 5m0s,
      @ifnothtml{@math{\hookrightarrow}}@c
@end ifnothtml@c
 threshold = 50000000000000, buffer = 100000000000000)
[BZZ] Swarm: new chequebook set: saving config file, resetting all
      @ifnothtml{@math{\hookrightarrow}}@c
@end ifnothtml@c
connections in the hive
[KΛÐ]: remove node enode://23ae0e6...aa4fb@@195.228.155.76:30301 from table
@end example

Once the node deployed a new chequebook its address is set in the config file and all connections are dropped to be reset with the new conditions. Once we reconnect, purchase in one direction should be enabled. The logs from the point of view of the peer with no valid chequebook:


@example
[CHEQUEBOOK] initialised inbox (0x9585...3bceee6c -> 0xa5df94be...bbef1e5)
      @ifnothtml{@math{\hookrightarrow}}@c
@end ifnothtml@c
 expected signer: 041e18592......702cf5e73cf8d618
[SWAP] <enode://23ae0e62......8a4c6bc93b7d2aa4fb@@195.228.155.76:30301>
      @ifnothtml{@math{\hookrightarrow}}@c
@end ifnothtml@c
 set autocash to every 5m0s, max uncashed limit: 50000000000000
[SWAP] <enode://23ae0e62......8a4c6bc93b7d2aa4fb@@195.228.155.76:30301>
      @ifnothtml{@math{\hookrightarrow}}@c
@end ifnothtml@c
 autodeposit off (not buying)
[SWAP] <enode://23ae0e62......8a4c6bc93b7d2aa4fb@@195.228.155.76:30301>
      @ifnothtml{@math{\hookrightarrow}}@c
@end ifnothtml@c
 remote profile set: pay at: 100, drop at: 10000,
      @ifnothtml{@math{\hookrightarrow}}@c
@end ifnothtml@c
buy at: 20000000000, sell at: 20000000000
[BZZ] SWAP arrangement with <enode://23ae0e62......8a4c6bc93b7d2aa4fb
      @ifnothtml{@math{\hookrightarrow}}@c
@end ifnothtml@c
 @@195.228.155.76:30301>: purchase from peer disabled;
      @ifnothtml{@math{\hookrightarrow}}@c
@end ifnothtml@c
 selling to peer enabled at 20000000000 wei/chunk)
@end example

Depending on autodeposit settings, the chequebook will be regularly replenished:
@cindex autodeposit


@example
[BZZ] SWAP auto deposit ON for 0x6d2c5b -> 0xefbb0c:
      @ifnothtml{@math{\hookrightarrow}}@c
@end ifnothtml@c
 interval = 5m0s, threshold = 50000000000000,
      @ifnothtml{@math{\hookrightarrow}}@c
@end ifnothtml@c
 buffer = 100000000000000)
swap03.log:I1028 10:03:40.576238   59241 cheque.go:358] deposited
      @ifnothtml{@math{\hookrightarrow}}@c
@end ifnothtml@c
 100000000000000 wei to chequebook (0xefbb0c0...16dea,
      @ifnothtml{@math{\hookrightarrow}}@c
@end ifnothtml@c
balance: 100000000000000, target: 100000000000000)
@end example


The peer with no chequebook (yet) should not be allowed to download and thus retrieve requests will not go out.
The other peer however is able to pay, therefore this other peer can retrieve chunks from the first peer and pay for them. This in turn puts the first peer in positive, which they can then use both to (auto)deploy their own chequebook and to pay for retrieving data as well. If they do not deploy a chequebook for whatever reason, they can use their balance to pay for retrieving data, but only down to 0 balance; after that no more requests are allowed to go out. Again you will see:

@example
[BZZ] netStore.startSearch: unable to send retrieveRequest
      @ifnothtml{@math{\hookrightarrow}}@c
@end ifnothtml@c
to peer [aff89da0c6...623e5671c01]:
[SWAP]  <enode://23ae0e62......8a4c6bc93b7d2aa4fb@@195.228.155.76:30301>
      @ifnothtml{@math{\hookrightarrow}}@c
@end ifnothtml@c
 we cannot have debt (unable to buy)
@end example

If a peer without a chequebook tries to send requests without paying, then the remote peer (who can see that they have no chequebook contract) interprets this as adverserial behaviour resulting in the peer being dropped.

Following on in this example, we start mining and then restart the node. The second chequebook autodeploys, the peers sync their chains and reconnect and then if all goes smoothly the logs will show something like:

@example
initialised inbox (0x95850c6...bceee6c -> 0xa5df94b...bef1e5)
      @ifnothtml{@math{\hookrightarrow}}@c
@end ifnothtml@c
 expected signer: 041e185925bb......702cf5e73cf8d618
[SWAP] <enode://23ae0e62......8a4c6bc93b7d2aa4fb@@195.228.155.76:30301>
      @ifnothtml{@math{\hookrightarrow}}@c
@end ifnothtml@c
 set autocash to every 5m0s, max uncashed limit: 50000000000000
[SWAP] <enode://23ae0e62......8a4c6bc93b7d2aa4fb@@195.228.155.76:30301>
      @ifnothtml{@math{\hookrightarrow}}@c
@end ifnothtml@c
 set autodeposit to every 5m0s, pay at: 50000000000000,
      @ifnothtml{@math{\hookrightarrow}}@c
@end ifnothtml@c
 buffer: 100000000000000
[SWAP] <enode://23ae0e62......8a4c6bc93b7d2aa4fb@@195.228.155.76:30301>
      @ifnothtml{@math{\hookrightarrow}}@c
@end ifnothtml@c
 remote profile set: pay at: 100, drop at: 10000,
      @ifnothtml{@math{\hookrightarrow}}@c
@end ifnothtml@c
 buy at: 20000000000, sell at: 20000000000
[SWAP] <enode://23ae0e62......8a4c6bc93b7d2aa4fb@@195.228.155.76:30301>
      @ifnothtml{@math{\hookrightarrow}}@c
@end ifnothtml@c
 remote profile set: pay at: 100, drop at: 10000,
      @ifnothtml{@math{\hookrightarrow}}@c
@end ifnothtml@c
 buy at: 20000000000, sell at: 20000000000
[BZZ] SWAP arrangement with <enode://23ae0e62......8a4c6bc93b7d2aa4fb
      @ifnothtml{@math{\hookrightarrow}}@c
@end ifnothtml@c
@@195.228.155.76:30301>: purchase from peer enabled at
      @ifnothtml{@math{\hookrightarrow}}@c
@end ifnothtml@c
 20000000000 wei/chunk; selling to peer
      @ifnothtml{@math{\hookrightarrow}}@c
@end ifnothtml@c
 enabled at 20000000000 wei/chunk)
@end example

As part of normal operation, after a peer reaches a balance of @code{PayAt} (number of chunks), a cheque payment is sent via the protocol. Logs on the receiving end:

@example
[CHEQUEBOOK] verify cheque: contract: 0x95850...eee6c, beneficiary:
      @ifnothtml{@math{\hookrightarrow}}@c
@end ifnothtml@c
0xe10536ae628...cdc085e491, amount: 868020000000000,
      @ifnothtml{@math{\hookrightarrow}}@c
@end ifnothtml@c
signature: a7d52dc744b8......f1fe2001 - sum: 866020000000000
[CHEQUEBOOK] received cheque of 2000000000000 wei in inbox
      @ifnothtml{@math{\hookrightarrow}}@c
@end ifnothtml@c
(0x95850...eee6c, uncashed: 42000000000000)
@end example

The cheque is verified. If uncashed cheques have an outstanding balance of more than @code{AutoCashThreshold}, the last cheque (with a cumulative amount) is cashed. This is done by sending a transaction containing the cheque to the remote peer's cheuebook contract. Therefore in order to cash a payment, your sender account (baseaddress) needs to have funds and the network should be mining.
@cindex autocash
@cindex cheque

@example
[CHEQUEBOOK] cashing cheque (total: 104000000000000) on chequebook
      @ifnothtml{@math{\hookrightarrow}}@c
@end ifnothtml@c
 (0x95850c6...eee6c) sending to 0xa5df94be...e5aaz
@end example

For further fine tuning of SWAP, see @ref{SWAP parameters}.
@vrindex AutoDepositBuffer, credit buffer
@vrindex AutoCashThreshold, autocash threshold
@vrindex AutoDepositThreshold: autodeposit threshold
@vrindex AutoCashInterval, autocash interval
@vrindex AutoCashBuffer, autocash target credit buffer)




